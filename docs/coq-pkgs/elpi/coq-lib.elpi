/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

accumulate lp-lib.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's terms
%
% Types of term formers, to be kept in sync with HOAS embedding in
% coq_elpi_HOAS.ml
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Data types that are opaque to LP: cannot be manipulated directly
macro @gref :- ctype "Globnames.global_reference". % name for a global constant
macro @univ :- ctype "Univ.Universe.t".            % universes
macro @name :- ctype "Name.t".                     % name hint (compare as =)

% Universes (for the "sort" term former)
kind universe type.
type prop universe.          % impredicative sort of propositions
type typ  @univ -> universe. % predicative sort of datatypes (carries a level)

% -- terms ------------------------------------------------------------------
kind term type.

type sort  universe -> term. % Prop, Type@{i}

% constants: inductive types, inductive constructors, definitions
type indt  @gref -> term. % nat, list, ...
type indc  @gref -> term. % O, S, nil, cons, ...
type const @gref -> term. % Nat.add, List.append, ...

% binders: to form functions, arities and local definitions
type lam  @name -> term -> (term -> term) -> term.         % fun x : t =>
type prod @name -> term -> (term -> term) -> term.         % forall x : t,
type let  @name -> term -> term -> (term -> term) -> term. % let x := v : T in

% other term formers: function application, pattern matching and recursion
type app   list term -> term.                   % app [hd|args]
type match term -> term -> list term -> term.   % match t p [branch])
type fix   @name -> int -> term -> (term -> term) -> term. % fix name rno ty bo

% implicit argument
type hole  term.

% well, for Axioms
type axiom term.


% -- helpers -----------------------------------------------------------------
macro @type :- (sort (typ _)).
macro @prop :- (sort prop).

macro @cast T TY :- (let "cast" TY T x\x).

% the HOAS embedding accepts strings in place of @names.  These lines
% tell the type checker to accept strings too.
type lam  string -> term -> (term -> term) -> term.
type prod string -> term -> (term -> term) -> term.
type let  string -> term -> term -> (term -> term) -> term.
type fix  string -> int -> term -> (term -> term) -> term.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's API
%
% Types of term formers, to be kept in sync with coq_elpi_API.ml
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type  coq-say A -> prop.
mode (coq-say i).
coq-say X :- $coq-say X.

type  coq-warn string -> prop.
mode (coq-warn i).
coq-warn X :- $coq-warn X.

type  coq-locate string -> term -> prop.
mode (coq-locate i         o).
coq-locate Name Term :- $coq-locate Name Term.

type  coq-env-const @gref -> term -> term -> prop.
mode (coq-env-const i        o       o).
coq-env-const Name Bo Ty :- $coq-env-const Name Bo Ty.

type  coq-env-indt @gref -> bool -> int -> int -> term -> list term -> list term -> prop.
mode (coq-env-indt i        o       o      o      o       o             o).
coq-env-indt Name IsInd Lno Luno Ty Knames Ktypes :-
  $coq-env-indt Name IsInd Lno Luno Ty Knames Ktypes.

type  coq-env-indc @gref -> int -> int -> term -> prop.
mode (coq-env-indc i        o       o      o).
coq-env-indc Name Lno Kno Ty :- $coq-env-indc Name Lno Kno Ty.

% universe constraints are taken from ELPI's constraints store (see elaborate)
type  coq-env-add-const string -> term -> term -> term -> prop.
mode (coq-env-add-const i         i       i       o).
coq-env-add-const Name BO TY GR :- $coq-env-add-const Name BO TY GR.

% universe constraints are taken from ELPI's constraints store (see elaborate)
type  coq-env-add-axiom string -> term -> term -> prop.
mode (coq-env-add-axiom i         i       o).
coq-env-add-axiom Name TY GR :- $coq-env-add-axiom Name TY GR.

type  coq-TC-declare-instance @gref -> int -> bool -> prop.
mode (coq-TC-declare-instance i        i      i).
coq-TC-declare-instance GR Precedence Global? :-
  $coq-TC-declare-instance GR Precedence Global?.

type  coq-CS-declare-instance @gref -> prop.
mode (coq-CS-declare-instance i).
coq-CS-declare-instance GR :- $coq-CS-declare-instance GR.

type  coq-typecheck term -> term -> prop.
mode (coq-typecheck i       o).
coq-typecheck Bo Ty :- $coq-typecheck Bo Ty.

% adds Coq's universe constraints to ELPI's constraints store.
% call this before adding anything to the env, on both body and type.
type  coq-elaborate term -> term -> term -> prop.
mode (coq-elaborate i       o       o).
coq-elaborate Bo Bo1 Ty1 :- $coq-elaborate Bo Bo1 Ty1.

type  coq-env-typeof-gr @gref -> term -> prop.
mode (coq-env-typeof-gr i        o).
coq-env-typeof-gr GR TY :- $coq-env-typeof-gr GR TY.

type  coq-err string -> prop.
mode (coq-err i).
coq-err Msg :- $coq-err Msg.

type  coq-string-of-gr @gref -> string -> prop.
mode (coq-string-of-gr i        o).
coq-string-of-gr GR S :- $coq-string-of-gr GR S.

type  coq-mk-name string -> @name -> prop.
mode (coq-mk-name i         o).
coq-mk-name S N :- $coq-mk-name S N.

type coq-univ-print-constraints prop.
coq-univ-print-constraints :- $coq-univ-print-constraints.

type  coq-univ-max @univ -> @univ -> @univ -> prop.
mode (coq-univ-max i        i        o).
coq-univ-max U1 U2 M :- $coq-univ-max U1 U2 M.

type  coq-univ-sup @univ -> @univ -> prop.
mode (coq-univ-sup i        o).
coq-univ-sup U S :- $coq-univ-sup U S.

type  coq-univ-new list @name -> @univ -> prop.
mode (coq-univ-new i             o).
coq-univ-new L U :- $coq-univ-new L U.

type coq-univ-leq, coq-univ-eq  @univ -> @univ -> prop.
mode (coq-univ-leq i i).
mode (coq-univ-eq i i).
coq-univ-leq U1 U2 :- $coq-univ-leq U1 U2.
coq-univ-eq U1 U2 :- $coq-univ-eq U1 U2.

% -- helpers -----------------------------------------------------------------
type  coq-env-unfolds? term -> prop.
mode (coq-env-unfolds? i).
coq-env-unfolds? (const GR) :- coq-env-const GR BO _, not(BO = axiom).

% -- override printing function in lp-lib ------------------------------------
:before "default-fatal-error"
fatal-error Msg :- !, M is "elpi: " ^ Msg, coq-err M.

type debug-print string -> A -> prop.
:before "default-debug-print"
debug-print Msg Data :- !, M is "elpi: " ^ Msg, $coq-say M Data.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Best effort pretty printer using the name hints
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
type pp A -> B -> prop.
mode (pp i o).

macro @pp X N :- (pp X N :- !).

pp (app L) L1 :- !, pp-list L L1.
pp (prod N T F) (prod N T1 F1) :- !,
  pp T T1, pi x\ @pp x N => pp (F x) F1.
pp (lam N T F) (lam N T1 F1) :- !,
  pp T T1, pi x\ @pp x N => pp (F x) F1.
pp (let N T B F) (let N T1 B1 F1) :- !,
  pp T T1, pp B B1, pi x\ @pp x N => pp (F x) F1.
pp (fix N _R _T B) (fix N _ _ B1) :- !, pi f\ @pp f N => pp (B f) B1.
pp (match A _R B) (match A1 _ B1) :- !, pp A A1, pp-list B B1.
pp (indt KN) KN :- !.
pp (indc KN) KN :- !.
pp (const KN) KN :- !.
pp X X :- !.
pp _ "unprintable" :- !. % cannot fail

mode (pp-list i o).
pp-list [] [].
pp-list [X|XS] [Y|YS] :- !, pp X Y, pp-list XS YS.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Term surgery
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type  subst-prod list term -> term -> term -> prop.
mode (subst-prod i            i       o).
subst-prod [] P P.
subst-prod [X|XS] (prod _ _ F) P :- subst-prod XS (F X) P.

type  subst-lam list term -> term -> term -> prop.
mode (subst-lam i            i       o).
subst-lam [] T T.
subst-lam [X|XS] (lam _ _ F) T :- subst-lam XS (F X) T.

type prod-2-lam term -> term -> prop.
prod-2-lam (prod N T F) (lam N T R) :- !, pi x\ prod-2-lam (F x) (R x).
prod-2-lam X X.

type  safe-dest-app term -> term -> list term -> prop.
mode (safe-dest-app i o o).
safe-dest-app (app [X|XS]) X XS :- !.
safe-dest-app X X [].

type  mk-app term -> list term -> term -> prop.
mode (mk-app i i o).
mk-app HD [] HD :- !.
mk-app (app L) Args (app LArgs) :- !, append L Args LArgs.
mk-app (?? as K) [A|Args] R :- !, unsafe-cast K K', mk-app (K' A) Args R.
mk-app HD Args (app [HD|Args]).

% vim:set ft=lprolog spelllang=:

