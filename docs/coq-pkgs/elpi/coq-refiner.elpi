/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

accumulate coq-lib.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Reduction %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

macro @stack :- list term.

% to model the imperative environment of a reduction machine we put in
% the context (val x T TN) where x is the bound variable, T its value
% and TN its hnf
type val term -> term -> term -> prop.

% indirection, to be used if we add to the stack "match" frames
type  unwind term -> @stack -> term -> prop.
mode (unwind i i o).
unwind T A R :- mk-app T A R.

type  nth-stack int -> @stack -> @stack -> term -> @stack -> prop.
mode (nth-stack i i o o o).
nth-stack 0 [X|XS] [] X XS :- !.
nth-stack N [X|XS] [X|Before] At After :-
  M is N - 1, nth-stack M XS Before At After.

% whd beta-iota-delta-zeta, main code
mode (whd i i o o).
type whd term -> @stack -> term -> @stack -> prop.

whd (app [Hd|Args]) C X XC :- !, whd Hd {append Args C} X XC.
whd (lam _ _ _ as X) [] X [] :- !.
whd (lam _ _ F) [B|C] X XC :- !,
  (pi x\ val x B _BN => whd (F x) C (F1 x) (C1 x)), X = F1 B, XC = C1 B.
whd (let _  _ B F) C X XC :- !,
  (pi x\ val x B _BN => whd (F x) C (F1 x) (C1 x)), X = F1 B, XC = C1 B.
whd (const GR) C X XC :- unfold GR C D DC, !, whd D DC X XC.
whd (match A _ L) C X XC :- whd-indc A GR KA, !,
  whd {match-red GR KA L C} X XC.
whd (fix _ N _ F as Fix) C X XC :- nth-stack N C LA A RA, whd-indc A GR KA, !,
  whd {fix-red F Fix LA GR KA RA} X XC.
whd N C X XC :- $is_name N, val N V VN, !, cache-whd VN V, whd VN C X XC.
whd X C X C.

% assert A reduces to a constructor
whd-indc A GR KA :- whd A [] VA C, !, VA = indc GR, KA = C.

% iota step
mode (match-red i i i i o o).
match-red GR KArgs BL C X XC :-
  coq-env-indc GR Lno Ki _,
  drop Lno KArgs Args,
  nth Ki BL Bi,
  hd-beta {mk-app Bi Args} C X XC.

% iota step
mode (fix-red i i i i i i o o). 
fix-red F Fix LA GR KA RA X XC :-
  ArgsWRedRecNo := append LA [{mk-app (indc GR) KA}|RA],
  hd-beta {mk-app (F Fix) ArgsWRedRecNo} [] X XC.

% delta (global constants)
unfold GR A BO BOC :- coq-env-const GR B _, hd-beta B A BO BOC.

% ensures its first argument is the whd of the second
mode (cache-whd i i).
cache-whd (?? as K) V :- !, whd V [] X XC, unwind X XC K.
cache-whd _ _.

mode (hd-beta i i o o).
hd-beta (app [Hd|Args]) S X C :- !, hd-beta Hd {append Args S} X C.
hd-beta (lam _ _ F) [A|AS] X C :- !, hd-beta (F A) AS X C.
hd-beta (?? as K) [A|AS] X C :- !, % auto-intro
  assert (of A TA _) "already typed", K = lam _ TA F, hd-beta (F A) AS X C.
hd-beta X C X C.

mode (hd-beta-zeta i i o o).
hd-beta-zeta (app [Hd|Args]) S X C :- !, hd-beta-zeta Hd {append Args S} X C.
hd-beta-zeta (lam N T F) [A|AS] X C :- !, hd-beta-zeta (F A) AS X C.
hd-beta-zeta (let N T B F) AS X C :- !, hd-beta-zeta (F B) AS X C.
hd-beta-zeta (?? as K) [A|AS] X C :- !, % auto-intro
  assert (of A TA _) "already typed", K = lam _ TA F, hd-beta-zeta (F A) AS X C.
hd-beta-zeta X C X C.

hd-beta-zeta-reduce T R :- hd-beta-zeta T [] H S, unwind H S R.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Unification %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% invariant: hd-beta terms
% we start with ff, tt to handle symmetric cases
% NOTE: rec-calls with unify (ensured hd-beta + ff) , symmetric rules are typically !
% NOTE: asymmetric rules are not ! otherwise the flip rule is killed
% NOTE: whd are !
% names: unif X C  T D M
kind cumul type.
type eq cumul.
type leq cumul.

type unif term -> @stack -> term -> @stack -> bool -> cumul -> prop.
mode (unif i i i i i i).
%@log (unif _ _ _ _ _ _).

mode (swap i i i i).
type  swap bool -> (A -> B -> prop) -> A -> B -> prop.
swap tt F A B :- F B A.
swap ff F A B :- F A B.

% flexible cases
@tail-cut-if "unif:greedy" (unif (?? V L) [] T D _ _) (!, bind-list L {unwind T D} V).
@tail-cut-if "unif:greedy" (unif X C (?? V L) [] _ _) (!, bind-list L {unwind X C} V).

unif (sort (typ S1)) [] (sort (typ S2)) [] M eq  :- !, swap M coq-univ-eq S1 S2.
unif (sort (typ S1)) [] (sort (typ S2)) [] M leq :- !, swap M coq-univ-leq S1 S2.
unif (sort S1) [] (sort S2) [] _ _ :- !, ignore-failure(S1 = S2).  % FIXME
unif (indt GR1) C (indt GR2) D _ _ :- !, GR1 = GR2, unify-ctxs C D.
unif (indc GR1) C (indc GR2) D _ _ :- !, GR1 = GR2, unify-ctxs C D.

% fast path for stuck term on the right
unif X C (indt _ as T) D ff U :- !, unif T D {whd X C} tt U. % TODO:1
unif X C (indc _ as T) D ff U :- !, unif T D {whd X C} tt U. % TODO:1

% congruence rules TODO: is the of assumption really needed?
unif (lam N T1 F1) [] (lam M T2 F2) [] _ _ :- !, ignore-failure(N = M),
  unify T1 T2 eq,
  pi x\ @pp x N => (of x T1 x) => unify (F1 x) (F2 x) eq.
unif (prod N T1 F1) [] (prod M T2 F2) [] _ U :- !, ignore-failure(N = M),
  unify T1 T2 eq,
  pi x\ @pp x N => (of x T1 x) => unify (F1 x) (F2 x) U.
unif (fix N Rno Ty1 F1) B1 (fix M Rno Ty2 F2) B2 _ _ :- !, ignore-failure(N = M),
  unify Ty1 Ty2 eq,
  (pi f\ @pp f N => (of f Ty1 f) => unify (F1 f) (F2 f) eq),
  unify-ctxs B1 B2.
unif (match A1 R1 L1) B1 (match A2 R2 L2) B2 _ _ :- !,
  unify A1 A2 eq, unify R1 R2 eq, unify-list L1 L2, unify-ctxs B1 B2.

% congruence heuristic (same maybe-non-normal head)
unif (let N T1 B1 F1) C1 (let M T2 B2 F2) C2 _ _ :- ignore-failure(N = M),
  unify T1 T2 eq, unify B1 B2 eq, 
  (pi x\ @pp x N => val x B1 _ => unify (F1 x) (F2 x) eq),
  unify-ctxs C1 C2, !.
unif (const GR) C (const GR) D _ _ :- unify-ctxs C D, !.
unif X C T D _ _ :- $is_name X, $is_name T, X = T, unify-ctxs C D.

% 1 step reduction  TODO:1
unif (const GR) C T D M U :- unfold GR C X1 C1, !, unif X1 C1 T D M U.
unif (let N _ B F) C1 T C2 M U :- !,
  pi x\ @pp x N => val x B _ => unif {hd-beta (F x) C1} T C2 M U.
unif (match A _ L) C T D M U :- whd-indc A GR KA, !,
  unif {match-red GR KA L C} T D M U.
unif (fix _ N _ F as X) C T D M U :- nth-stack N C LA A RA, whd-indc A GR KA, !,
  unif {fix-red F X LA GR KA RA} T D M U.
unif X C T D M U :- $is_name X, val X V _VN, !, unif {hd-beta V C} T D M U.
  % TODO we could use _VN if nonflex
% TODO:1 turn into (if reducible then reduce1 else fully-reduce2 tt)

% symmetry
unif X C T D ff U :- !, unif T D X C tt U.

% error
% unif X C1 Y C2 _tt :- !,
%   $print "Error: " {pp {unwind X C1}} "vs" {pp {unwind Y C2}}. %, halt.

% Contexts happens to be lists, so we just reuse the code
unify-list L1 L2 :- unify-ctxs L1 L2.

% the entry points of rec calls: unify unify-ctxs
mode (unify-ctxs i i).
unify-ctxs [] [].
unify-ctxs [X|XS] [Y|YS] :- unify X Y eq, !, unify-ctxs XS YS.

unify A B C :- unif {hd-beta A []} {hd-beta B []} ff C.

%%%%%% entry points for clients %%%%%%%
unify-eq  X Y :- unify X Y eq.
unify-leq X Y :- unify X Y leq.
unify-list-eq L1 L2 :- unify-list L1 L2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Flexible case %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Binding a list of terms (delift in Matita, invert subst in Coq) 

% We use a keyd discipline, i.e. we only bind terms with a rigid head
mode (key i).
key (const _).
key (indt _).
key (indc _).
key C :- $is_name C.

type bind-list list term -> term -> A -> prop.
mode (bind-list i i o).
bind-list [] T T' :- copy T T1, (T1 = T').
bind-list [app [C| AS] |VS] T R :- key C, !,
  pi x\ (pi L X\ @tail-cut-if "unif:greedy" (copy (app[C|L]) X) (unify-list-eq L AS, X = x)) => bind-list VS T (R x).
bind-list [C|VS] T R :- key C, !,
  pi x\ @tail-cut-if "unif:greedy" (copy C x) true => bind-list VS T (R x).
bind-list [ _ |VS] T R :- !, pi x\ bind-list VS T (R x).

% CAVEAT: (app FLEX), (match _ _ FLEX) are not terms!
type copy term -> term -> prop.
%@log (copy _ _).
mode (copy i o).
copy X Y :- $is_name X, X = Y, !.
copy X Y :- $is_name X, val X T _, !, copy T Y.
copy (const _ as C) C :- !.
copy (indc _ as C) C :- !.
copy (indt _ as C) C :- !.
copy (sort _ as C) C :- !.
copy (fix N Rno Ty F) (fix N Rno Ty1 F1) :- !,
  copy Ty Ty1, pi x\ @pp x N => copy (F x) (F1 x).
copy (match T Rty B) X :- !,
  copy T T1, copy Rty Rty1, map B copy B1, X = (match T1 Rty1 B1).
copy (app L) X :- !, map L copy L1, X = app L1.
copy (lam N T F) (lam N T1 F1) :- !,
  copy T T1, pi x\ @pp x N => copy (F x) (F1 x).
copy (let N T B F) (let N T1 B1 F1) :- !,
  copy T T1, copy B B1, pi x\ @pp x N => copy (F x) (F1 x).
copy (prod N T F) X :- !,
  copy T T1, (pi x\ @pp x N => copy (F x) (F1 x)), X = (prod N T1 F1).
copy (?? M L) W :- map L copy L1, mk-app M L1 W.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Type checking %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% eat-prod head head-ty args-done todo-args refined-app refined-ty %%%%%%%%

mode (eat-prod i i i o o o).

eat-prod [] Hd Prod Adone Res ResTy :- !,
  (unify-eq Res {mk-app Hd {rev Adone}}),
  (unify-leq Prod ResTy).

mode (bidir-app i i i i).
:name "of:bidirectional-app"
bidir-app _ _ _ _.
saturate-dummy (prod _ _ F) R :- pi x\ saturate-dummy (F x) R.
saturate-dummy X X.  

% XXX why not unif?
eat-prod [A|AS] Hd Prod Adone Res ResTy :-
  bidir-app Hd Prod Adone ResTy,
  if (whd Prod [] (prod _ Src Tgt) [])
    (of A Src ResA, (eat-prod AS Hd (Tgt ResA) [ResA|Adone] Res ResTy))
    (debug-print "whd-eat-prods" Prod, fail). %(fail-with "not a prod").

type of term -> term -> term -> prop.
mode (of i o o).
@log(of _ _ _).

macro @of X N T :- ((pi Tx\ @neck-cut-if-not "of:coerce" (of X Tx X) (unify-leq T Tx)), @pp X N).

of (lam N S F) LamTy (lam N S2 F2) :-
  of (prod N S (s\ hole)) (sort _U) (prod M S2 T ),
  unify-leq (prod M S2 T) LamTy,
  pi x\ @of x N S2 => of (F x) (T x) (F2 x).

of (app [Hd|Args]) TyApp App :-
  of Hd Prod Hd1, (eat-prod Args Hd1 Prod [] App TyApp).

of (prod N S F) ProdTy (prod N ResS ResF) :-
  of S (sort U1) ResS,
  (pi x\ @of x N ResS => of (F x) (sort U2) (ResF x)),
  pts U1 U2 U,
  unify-leq (sort U) ProdTy.

of (match T Rty Bs) ResRtyInst (match ResT ResRty ResBs) :-
  of T TyT ResT,
  % T : TyT = (indt GR) LArgs RArgs, and (indt GR) : Ty
  safe-dest-app TyT (indt GR) Args,
  coq-env-indt GR _IsInd Lno _Luno Ty Kn Ks, % TODO LUno
  split-at Lno Args LArgs RArgs, % TODO: not a failure, just type err
  % fix LArgs on ind ty and constructors ty
  subst-prod LArgs Ty TyLArgs,
  map Ks (subst-prod LArgs) KsLArgs,
  % Rty skeleton (uknown ending) = lam rargs, lam e : indt largs rargs, ?
  mk-rty [] {mk-app (indt GR) LArgs} TyLArgs ResRtyRaw, 
  of ResRtyRaw _ ResRty, unify-eq Rty ResRty,
  % Rty must type each branch
  map2 KsLArgs Kn (mk-bty Rty Lno) BsTy,
  map2 Bs BsTy of ResBs,
  % Outside type
  unify-leq {mk-app ResRty {append RArgs [ResT]}} ResRtyInst.

of (let N Ty Bo F) TyFx (let N ResTy ResBo ResF) :-
  of Ty (sort _) ResTy, of Bo ResTy ResBo, of _ ResTy ResBoNorm,
  pi x\ @of x N ResTy => val x ResBo ResBoNorm => of (F x) TyFx (ResF x).

of (fix N Rno Ty BoF) ResTy (fix N Rno RTy ResBoF) :-
  of Ty (sort _) RTy,
  unify-leq RTy ResTy,
  pi f\ @of f N RTy => of (BoF f) ResTy (ResBoF f).
 
of (sort prop) (sort (typ T)) (sort prop).
of (sort (typ T) as X) S X :-
  coq-univ-sup T T+1,
  if (is_flex S) (S = sort (typ T+1)) % XXX unif 
     (if (S = sort prop) false
         (S = sort (typ U), coq-univ-leq T+1 U)).

of (indt GR as X) T X  :- coq-env-indt GR _ _ _ T1 _ _, unify-leq T1 T.
of (indc GR as X) T X  :- coq-env-indc GR _ _ T1,       unify-leq T1 T.
of (const GR as X) T X :- coq-env-const GR _ T1,        unify-leq T1 T.

macro @constraint P L :- debug-print "new constraint" P,
  $constraint P L.

of (?? as X) T Y :- !, X = Y,      @constraint (of X T X) [X].
of hole T X :-      !, X = _FRESH, @constraint (of X T X) [X].


mode (coerce i i i o) xas coerced, (coerce i o i o) xas coercible.
type coerce term -> term -> term -> term -> prop.
type coerced term -> term -> term -> term -> prop.
type coerceible term -> term -> term -> term -> prop.
of X T R :- get-option "of:coerce" tt, not ($is_flex T), of X XT Y, coerced XT T Y R.

% Uniqueness of typing

canon-map [] [] [].
canon-map [N|NS] [V|VS] [ val N V _ | M] :- $is_name N, !, canon-map NS VS M.

constraint of val pp {
 rule (G1 ?- of X1 T1 RX1)
    \ (G2 ?- of X2 T2 RX2)
    > X1 = X2
    | ( X1 = uvar K L1, X2 = K L2, canon-map L1 L2 M)
  <=> (
    debug-print "resume" (M => unify-eq T1 T2),
    (G1 => G2 => M => unify-eq T1 T2)).
}


% typing match %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
type mk-rty list term -> term -> term -> term -> prop. 
mk-rty ARGS HD (prod N S T) (lam N S F) :- !,
  pi x\ mk-rty [x|ARGS] HD (T x) (F x).
mk-rty ARGS HD _ (lam _ IndApp _FRESH) :-
  mk-app HD {rev ARGS} IndApp.

type mk-bty term -> int -> term -> term -> term -> prop.
mk-bty Rty Lno (prod N S T) Ki (prod N S B) :- !,
  pi x\ mk-bty Rty Lno (T x) Ki (B x).
mk-bty Rty Lno T Ki AppRtyNorm :-
  safe-dest-app T (indt _) Args,
  split-at Lno Args LArgs RArgs,
  mk-app Rty {append RArgs [{mk-app Ki {append LArgs RArgs}}]} AppRty,
  hd-beta-zeta-reduce AppRty AppRtyNorm.

% PTS sorts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (pts i i o).

pts  prop     prop     prop.
pts (typ _)   prop     prop.
pts (typ T1) (typ T2) (typ M) :- coq-univ-max T1 T2 M.
pts  prop    (typ T2) (typ T2).

pts (??    as X) (prop  as Y) R :- coq-univ-new [] U, X = typ U, pts X Y R.
pts (prop  as X) (??    as Y) R :- coq-univ-new [] U, Y = typ U, pts X X R.
pts (??    as X) (typ _ as Y) R :- coq-univ-new [] U, X = typ U, pts X Y R.
pts (typ _ as X) (??    as Y) R :- coq-univ-new [] U, Y = typ U, pts X Y R.
pts (??    as X) (??    as Y) R :- X = typ _, Y = typ _,         pts X Y R.

% pts (?? as X) (?? as Y) Z :- !, @constraint (pts X Y Z) [X,Y].
% pts (?? as X) Y Z :- !, @constraint (pts X Y Z) [X].
% pts X (?? as Y) Z :- !, @constraint (pts X Y Z) [Y].


% vim:set ft=lprolog spelllang=:
