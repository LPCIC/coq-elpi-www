% elpi: embedded lambda prolog interpreter
% license: GNU Lesser General Public License Version 2.1 or later

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Custom predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

X  < Y  :- $lt_ X Y.
X i< Y  :- $lt_ X Y.
X r< Y  :- $lt_ X Y.
X s< Y  :- $lt_ X Y.

X  > Y  :- $gt_ X Y.
X i> Y  :- $gt_ X Y.
X r> Y  :- $gt_ X Y.
X s> Y  :- $gt_ X Y.

X  =< Y :- $le_ X Y.
X i=< Y :- $le_ X Y.
X r=< Y :- $le_ X Y.
X s=< Y :- $le_ X Y.

X  >= Y :- $ge_ X Y.
X i>= Y :- $ge_ X Y.
X r>= Y :- $ge_ X Y.
X s>= Y :- $ge_ X Y.

getenv X Y :- $getenv X Y.
system X Y :- $system X Y.
X is Y :- $is X Y.
open_in X Y :- $open_in X Y.
open_out X Y :- $open_out X Y.
open_append X Y :- $open_append X Y.
open_string X Y :- $open_string X Y.
close_in X :- $close_in X.
close_out X :- $close_out X.
output X Y :- $output X Y.
term_to_string X Y :- $term_to_string X Y.
string_to_term X Y :- $string_to_term X Y.
flush X :- $flush X.
halt :- $halt.
input X Y Z :- $input X Y Z.
input_line X Y :- $input_line X Y.
readterm X Y :- $readterm X Y.
lookahead X Y :- $lookahead X Y.
eof X :- $eof X.
is_flex X :- $is_flex X. % is_flex X :- not (not (X = x_unused_x))
                         % does not work with delay/propagate
                         % because the predicate is not "reentrant"
                         % (i.e. when X <- x_unused_x occurs, it may
                         % resume a goal that checks again is_flex X
                         % returning true in place of false!

level X Y :- $level X Y. % Y = level of constant X
                         % Y < 0 if X is global, 0 <= Y if X is local
                         % fails if X is not a constant

occurs X Y :- $occurs X Y. % if X is a constant,
                           % succeeds if X occurs in Y

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Standard predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

true.

X = X.

(A ; _B) :- A.
(_A ; B) :- B.

not X :- X, !, fail.
not _X.

printterm S T :- term_to_string T T', output S T'.

print S :- output std_out S.

read S :- flush std_out, input_line std_in X, string_to_term X S.

stop :- halt.

time T :- $gettimeofday B, T, $gettimeofday A, D is A - B, $print "TIME" D T.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Type annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type $$=   X -> X -> prop.
type $$::  X -> list X -> list X.
type $$[]  list X.
type $$is  X -> X -> prop.
type $$$term_to_string X -> string -> prop.
type $$$print variadic any prop.
type $$$debug variadic any prop.
type $$:- prop -> prop -> prop.
type $$, variadic any any.
type $$?? A.
type $$as A -> A -> A.
type $$$constraint A -> B -> prop.
type $$$gettimeofday float -> prop.
type $$$counter string -> int -> prop.
type $$- A -> A -> A.
type fail, !, halt  prop.
type std_in, std_out  (ctype "file").
type $$=> prop -> prop -> prop.
type $$^ string -> string -> string.
type $$+ int -> int -> int.
type false prop.
type time prop -> prop.

type $$$new_safe (ctype "safe") -> prop.
type $$$open_safe (ctype "safe") -> list A -> prop.
type $$$stash (ctype "safe") -> A -> prop.

